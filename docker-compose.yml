volumes:
  postgres_data:

services:
  triton:
    restart: unless-stopped
    image: nvcr.io/nvidia/tritonserver:24.08-py3
    volumes:
      - ./model-repository:/models
    command: [
      "tritonserver",
      "--model-repository=/models",
    ]
    ports:
      - "8000:8000" # HTTP port
      - "8001:8001" # gRPC port
      - "8002:8002" # Metrics port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api:
    restart: unless-stopped
    depends_on:
      triton:
        condition: service_healthy
    image: "mousse/search-service:${VERSION}"
    build:
      context: ./backend
      target: production
      args:
        VERSION: "${VERSION}"
    ports:
      - "${API_PORT}:8000"
    environment:
      - ROOT_PATH=${ROOT_PATH:-}
      - DB_URI=postgresql+asyncpg://${POSTGRES_APP_USER}:${POSTGRES_APP_USER_PASS}@db:5432/${POSTGRES_DB}
    volumes:
      - ./data:/var/local/data:ro
      - ./model-repository:/var/local/models:ro

  db:
    image: "mousse/postgres:16.4-postgis-pgvector"
    build:
      context: ./postgresql
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_APP_USER: ${POSTGRES_APP_USER}
      POSTGRES_APP_USER_PASS: ${POSTGRES_APP_USER_PASS}
      POSTGRES_APP_SCHEMA: core
      RUN_AS_ROOT: false
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB}"
